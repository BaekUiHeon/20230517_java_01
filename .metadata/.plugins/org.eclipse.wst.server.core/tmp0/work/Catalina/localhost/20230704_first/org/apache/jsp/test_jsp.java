/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-04 15:09:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\r\n");
      out.write("    <!-- style 지정 - 각자 실습- -->\r\n");
      out.write("    <!---->\r\n");
      out.write("    <script>\r\n");
      out.write("        $(loadedHandler); // loadedHandler라는 함수를, body의 document가 모두 구성된후 실행함.\r\n");
      out.write("         \r\n");
      out.write("        function loadedHandler(){ //loadedHandler함수선언시작.\r\n");
      out.write("            $('.c').on(\"blur\",cntBlurHandler);  // class=\"c\"를 가진선택자는 blur(해당텍스트위치를 벗어날때)가 일어날때 cntBlurHandler를 실행함. \r\n");
      out.write("            $(\"[type=button]\").on(\"click\",calcClickHandler); // button타입이 클릭될때 calcClickHandler를 실행함.\r\n");
      out.write("        } // 함수선언끝.\r\n");
      out.write("\r\n");
      out.write("        function cntBlurHandler(event){  //cntBlurHandler함수선언시작.\r\n");
      out.write("            // console.log(this);\r\n");
      out.write("            // console.log(event.target);\r\n");
      out.write("            // console.log(event);\r\n");
      out.write("            var cost = $(this).parent().prev().text();  //현재 선택자의 부모의, 형제중이전선택자, 의텍스트를, cost에 저장\r\n");
      out.write("            var count = $(this).val(); //현재 선택자의 값을 count에 저장. \r\n");
      out.write("            $(this).parent().next().children(\".p\").val(cost * count); //현재 선택자의 부모의, 형제중다음선택자, 의자식중p클래스를가진, 것의값을(cost*count)로 만듬.\r\n");
      out.write("        }\r\n");
      out.write("        function calcClickHandler(event){  // calcClickHandler함수선언시작\r\n");
      out.write("            console.log(this);\r\n");
      out.write("            console.log(event.target);\r\n");
      out.write("            console.log(event);\r\n");
      out.write("            var sum=0; //sum값 초기화.\r\n");
      out.write("            $(\"#cTotalCnt\").val(0); //cTotlaCnt값 초기화.\r\n");
      out.write("            $(\".c\").each(function(){ // class=\"c\"를 가진값들을 모두 더하여 sum에저장\r\n");
      out.write("                sum += parseInt($(this).val());\r\n");
      out.write("            });\r\n");
      out.write("            $(\"#cTotalCnt\").val(sum); //sum값을 cTotlaCnt에 저장\r\n");
      out.write("\r\n");
      out.write("            sum=0; //sum값 초기화\r\n");
      out.write("            $(\"#cTotalPrice\").val(0); //cTotalPrice값 초기화\r\n");
      out.write("            $(\".p\").each(function(){ //class=\"p\"를 가진 값들을 모두 더하여 sum에 저장\r\n");
      out.write("                sum+= parseInt($(this).val());\r\n");
      out.write("            });\r\n");
      out.write("            $(\"#cTotalPrice\").val(sum); //cTotlaPrice에 sum을 저장.\r\n");
      out.write("    }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <form>\r\n");
      out.write("    <table border=\"1\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>메뉴</th>\r\n");
      out.write("            <th>가격</th>\r\n");
      out.write("            <th>수량</th>\r\n");
      out.write("            <th>합계</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>아메리카노</td>\r\n");
      out.write("            <td>2500</td>\r\n");
      out.write("            <td><input type=\"text\" name=\"c1\" id=\"c1\" class=\"c\"></td>\r\n");
      out.write("            <td><input type=\"text\" name=\"c1Price\" id=\"c1Price\" class=\"p\" readonly></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>라떼</td>\r\n");
      out.write("            <td>3000</td>\r\n");
      out.write("            <td><input type=\"text\" name=\"c2\" id=\"c2\" class=\"c\"></td>\r\n");
      out.write("            <td><input type=\"text\" name=\"c2Price\" id=\"c2Price\" class=\"p\" readonly></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>생강라떼</td>\r\n");
      out.write("            <td>4500</td>\r\n");
      out.write("            <td><input type=\"text\" name=\"c3\" id=\"c3\" class=\"c\"></td>\r\n");
      out.write("            <td><input type=\"text\" name=\"c3Price\" id=\"c3Price\" class=\"p\" readonly></td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>합계</th>\r\n");
      out.write("            <th></th>\r\n");
      out.write("            <th><input type=\"text\" name=\"cTotalCnt\" id=\"cTotalCnt\" class=\"c\" readonly></th>\r\n");
      out.write("            <th><input type=\"text\" name=\"cTotalPrice\" id=\"cTotalPrice\" class=\"p\" readonly></th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td colspan=\"4\">\r\n");
      out.write("                <input type=\"button\" value=\"계산하기\">\r\n");
      out.write("                <input type=\"reset\" >\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
